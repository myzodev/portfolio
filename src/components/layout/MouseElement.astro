---
import { getLangFromUrl, useTranslations } from '@/i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---
<div
	class="size-112 fixed -top-112 -left-112 hidden lg:flex justify-center items-center scale-[0.15] z-100 rounded-full font-extrabold text-sm pointer-events-none bg-primary-200"
	data-hover-element
>
	<span class="opacity-0" data-hover-element-text>{t('show')}</span>
</div>

<script>
	import gsap from 'gsap';

	document.addEventListener('astro:page-load', () => {
		if (window.innerWidth <= 1024) return;

		/**
		 * Mouse element tracking
		 */
		const hoverElement = document.querySelector('[data-hover-element]') as HTMLDivElement;
		const hoverElementText = document.querySelector('[data-hover-element-text]') as HTMLSpanElement;

		const updateCoords = (event: MouseEvent) => {
			const { clientX, clientY } = event;
			const newX = clientX - 56 + 112;
			const newY = clientY - 61 + 112;

			gsap.to(hoverElement, {
				x: newX,
				y: newY,
				duration: 0.3
			});
		};

		window.addEventListener('mousemove', (event) => {
			requestAnimationFrame(() => updateCoords(event));
		});

		/**
		 * Mouse element hover behaviour
		 */
		const elements = document.querySelectorAll('a, button') as NodeListOf<HTMLAnchorElement | HTMLButtonElement>;

		elements.forEach((element) => {
			element.addEventListener('mouseenter', () => handleMouseEnter());
			element.addEventListener('mouseleave', () => handleMouseLeave());

			const handleMouseEnter = () => {
				if (element.classList.contains('projects-item') || element.classList.contains('link-overlay')) {
					return animateMouseElement('in');
				}

				animateMouseElement('scaleOut');
			};

			const handleMouseLeave = () => {
				animateMouseElement('out');
			};

			const animateMouseElement = (mode: 'in' | 'out' | 'scaleOut') => {
				const animationSettings = {
					duration: 0.5,
					ease: 'expo.inOut'
				};

				if (mode === 'scaleOut') {
					return gsap.to(hoverElement, {
						...animationSettings,
						scale: 0
					});
				}

				let scale: number = mode === 'out' ? 0.15 : 1;
				let opacity: number = mode === 'out' ? 0 : 1;

				gsap.to(hoverElement, {
					...animationSettings,
					scale: scale
				});

				gsap.to(hoverElementText, {
					...animationSettings,
					opacity: opacity
				});
			};
		});
	});
</script>
