---
interface Props {
	class?: string;
	href?: string;
	style?: 'light' | 'light-ghost' | 'primary';
	size?: 'xs' | 'sm' | 'base';

	[key: string]: any;
}

const { class: classes, href, style, size, ...props } = Astro.props;

const buttonTypeClasses = (): string => {
	switch (style) {
		case 'light':
			return 'text-neutral-800 bg-white';
		case 'light-ghost':
			return 'text-white border border-neutral-100';
		case 'primary':
			return 'text-white bg-primary-300';
		default:
			return '';
	}
};

const buttonSizeClasses = (): string => {
	switch (size) {
		case 'xs':
			return 'px-10 py-[20px] text-xs';
		case 'sm':
			return 'px-[28px] py-[12px] text-sm';
		case 'base':
			return 'px-32 py-[14px]';
		default:
			return '';
	}
};

const buttonClasses: string = `button-item relative align-middle font-bold text-center rounded-full overflow-hidden ${classes} ${buttonTypeClasses()} ${buttonSizeClasses()}`;

const Component = href ? 'a' : 'button';
---

<Component class={buttonClasses} href={href} {...props}>
	<span class="relative z-10">
		<slot />
	</span>

	<span class="absolute top-0 left-0 scale-0 rounded-full z-0 bg-primary-200" data-button-background></span>
</Component>

<script>
	import gsap from 'gsap';

	document.addEventListener('astro:page-load', () => {
		const buttons = document.querySelectorAll('.button-item') as NodeListOf<HTMLAnchorElement>;

		if (!buttons) return;

		buttons.forEach((button) => {
			const buttonBackground = button.querySelector('[data-button-background]') as HTMLSpanElement;
			const buttonWidth: number = button.clientWidth;

			gsap.set(buttonBackground, {
				width: buttonWidth * 2,
				height: buttonWidth * 2
			});

			button.addEventListener('mouseenter', () => animateBackground(1));
			button.addEventListener('mouseleave', () => animateBackground(0));
			button.addEventListener('mousemove', (event: MouseEvent) => {
				const { layerX, layerY } = event;

				gsap.to(buttonBackground, {
					ease: 'none',
					duration: 0.1,
					x: layerX - buttonWidth,
					y: layerY - buttonWidth
				});
			});

			const animateBackground = (scaleTo: number) => {
				gsap.to(buttonBackground, {
					duration: 0.8,
					ease: 'expo.inOut',
					scale: scaleTo
				});
			};
		});
	});
</script>
